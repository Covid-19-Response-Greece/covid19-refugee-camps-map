{"version":3,"sources":["webpack:///./src/pages/geolocate.js"],"names":["CENTER","SecondPage","React","useState","data","setdata","filter","setfilter","map","leafletElement","locate","setView","maxZoom","Array","isArray","length","geoJson","type","features","element","capacity","total_confirmed_cases","region","lat","latitude","lng","longtitude","properties","geometry","coordinates","L","GeoJSON","pointToLayer","feature","latlng","casesString","lastupdate","description","name_gr","region_gr","total_samples","slice","html","marker","icon","divIcon","className","riseOnHover","addTo","useEffect","response","axios","get","fetchData","setMappingFilter","mapSettings","center","defaultBaseMap","zoom","mapEffect","zoomSnap","zoomDelta","pageName"],"mappings":"0OAYMA,EAAS,CAHR,UACA,UA2IQC,UAtII,WAAO,IAAD,EACCC,IAAMC,SAAS,IAAhCC,EADgB,KACVC,EADU,OAEKH,IAAMC,UAAS,GAApCG,EAFgB,KAERC,EAFQ,wCAoBvB,aAAwD,IAAbC,QAAY,MAAJ,GAAI,GAA5BC,eAKzB,GAJAD,EAAIE,OAAO,CAAEC,SAAS,EAAMC,QAAS,KAErBC,MAAMC,QAAQV,IAASA,EAAKW,QAAU,EAEtD,CAEA,IAAMC,EAAU,CACdC,KAAM,oBACNC,SAAUd,EACPE,QAAO,SAACa,GACP,OAAyB,OAArBA,EAAQC,WAC0B,IAAlCD,EAAQE,wBAA0C,IAAXf,MAI5CE,KAAI,SAACc,QAAgB,IAAhBA,MAAS,IAAO,MACuBA,EAAzBC,EADE,EACZC,SAA2BC,EADf,EACGC,WACvB,MAAO,CACLT,KAAM,UACNU,WAAW,OAAD,UACLL,GAELM,SAAU,CACRX,KAAM,QACNY,YAAa,CAACJ,EAAKF,SAMP,IAAIO,IAAEC,QAAQf,EAAS,CAC3CgB,aAAc,SAACC,EAAcC,QAAW,IAAzBD,MAAU,IAAe,IAElCE,EAFkC,EACVF,EAApBN,kBAD8B,MACjB,GADiB,EAKpCP,EAOEO,EAPFP,SACegB,EAMbT,EANF,eACAU,EAKEV,EALFU,YACAC,EAIEX,EAJFW,QACAC,EAGEZ,EAHFY,UACAlB,EAEEM,EAFFN,sBACAmB,EACEb,EADFa,cAGFL,EAAW,GAAMf,EAEbA,EAAW,MACbe,EAAiBA,EAAYM,MAAM,GAAI,GAA5B,MAGb,IAAMC,EAAI,mHAGQJ,EAHR,4BAIEC,EAJF,+EAMiCnB,EANjC,4DAOkCoB,EAPlC,gEAQsCnB,EARtC,qDAS2BgB,EAT3B,wEAUyCD,EAVzC,gEAaJE,EAbI,gCAiBV,OAAOR,IAAEa,OAAOT,EAAQ,CACtBU,KAAMd,IAAEe,QAAQ,CACdC,UAAW,OACXJ,SAEFK,aAAa,OAKLC,MAAMxC,QAnGC,sBAGvBN,IAAM+C,WAAU,WAAM,mCACpB,YACE,IAAMC,QAAiBC,IAAMC,IAC3B,uDAGF/C,EAAQ6C,EAAS9C,UANC,uBAAC,WAAD,wBAQpBiD,KACC,IAyFH,IAAMC,EAAmB,WACvB/C,GAAWD,IAEPiD,EAAc,CAClBC,OAAQxD,EACRyD,eAAgB,gBAChBC,KA7GiB,IA8GjBC,UA5GqB,4CA6GrBC,SAAU,IACVC,UAAW,IAGb,OACE,kBAAC,IAAD,CAAQC,SAAS,QACf,kBAAC,IAAD,KACE,sDAGDxD,GAAU,kBAAC,IAAD,iBAASiD,EAAT,CAAsBhD,UAAW+C,MAC1ChD,GAAU,kBAAC,IAAD,iBAASiD,EAAT,CAAsBhD,UAAW+C,KAE7C,kBAAC,IAAD,CAAWrC,KAAK,UAAU6B,UAAU,cAClC,gGAGA,8BACA,sCACA,uBAAGA,UAAU,QAAb","file":"component---src-pages-geolocate-js-d7543017d366b9dc344c.js","sourcesContent":["import React from \"react\";\nimport Helmet from \"react-helmet\";\nimport L from \"leaflet\";\nimport axios from \"axios\";\nimport Layout from \"components/Layout\";\nimport Container from \"components/Container\";\nimport Map from \"components/Map\";\n\nconst LOCATION = {\n  lat: 38.814566,\n  lng: 23.06738,\n};\nconst CENTER = [LOCATION.lat, LOCATION.lng];\nconst DEFAULT_ZOOM = 6.5;\n\nconst SecondPage = () => {\n  const [data, setdata] = React.useState([]);\n  const [filter, setfilter] = React.useState(false);\n  React.useEffect(() => {\n    async function fetchData() {\n      const response = await axios.get(\n        \"https://api.jsonbin.io/b/5ee9d1a3ccc9877ac37d5cf0/7\"\n      );\n\n      setdata(response.data);\n    }\n    fetchData();\n  }, []);\n\n  /**\n   * mapEffect\n   * @description Fires a callback once the page renders\n   * @example Here this is and example of being used to zoom in and set a popup on load\n   */\n\n  async function mapEffect({ leafletElement: map } = {}) {\n    map.locate({ setView: true, maxZoom: 10 });\n\n    const hasData = Array.isArray(data) && data.length >= 0;\n\n    if (!hasData) return;\n\n    const geoJson = {\n      type: \"FeatureCollection\",\n      features: data\n        .filter((element) => {\n          if (element.capacity === null) return false;\n          if (element.total_confirmed_cases === 0 && filter === true)\n            return false;\n          return true;\n        })\n        .map((region = {}) => {\n          const { latitude: lat, longtitude: lng } = region;\n          return {\n            type: \"Feature\",\n            properties: {\n              ...region,\n            },\n            geometry: {\n              type: \"Point\",\n              coordinates: [lng, lat],\n            },\n          };\n        }),\n    };\n\n    const geoJsonLayers = new L.GeoJSON(geoJson, {\n      pointToLayer: (feature = {}, latlng) => {\n        const { properties = {} } = feature;\n        let casesString;\n\n        const {\n          capacity,\n          \"last update\": lastupdate,\n          description,\n          name_gr,\n          region_gr,\n          total_confirmed_cases,\n          total_samples,\n        } = properties;\n\n        casesString = `${capacity}`;\n\n        if (capacity > 1000) {\n          casesString = `${casesString.slice(0, -3)}k+`;\n        }\n\n        const html = `\n          <span class=\"icon-marker\">\n            <span class=\"icon-marker-tooltip\">\n              <h3> Camp ${name_gr}</h3>\n              <h3>${region_gr}</h3>\n              <ul>\n              <li><strong>Χωρητικότητα:</strong> ${capacity}</li>\n              <li><strong>Αριθμός Tests:</strong> ${total_samples}</li>\n              <li><strong>Κρούσματα COVID19:</strong> ${total_confirmed_cases}</li>\n                <li><i><h3>Camp info:</h3> ${description} </i></li>\n                <li><strong>Τελευταία ανανέωση:</strong> ${lastupdate}</li>\n              </ul>\n            </span>\n            ${name_gr}\n          </span>\n        `;\n\n        return L.marker(latlng, {\n          icon: L.divIcon({\n            className: \"icon\",\n            html,\n          }),\n          riseOnHover: true,\n        });\n      },\n    });\n\n    geoJsonLayers.addTo(map);\n  }\n  const setMappingFilter = () => {\n    setfilter(!filter);\n  };\n  const mapSettings = {\n    center: CENTER,\n    defaultBaseMap: \"OpenStreetMap\",\n    zoom: DEFAULT_ZOOM,\n    mapEffect,\n    zoomSnap: 0.25,\n    zoomDelta: 0.5,\n  };\n\n  return (\n    <Layout pageName=\"home\">\n      <Helmet>\n        <title>COVID-19 στα Camps</title>\n      </Helmet>\n\n      {filter && <Map {...mapSettings} setfilter={setMappingFilter} />}\n      {!filter && <Map {...mapSettings} setfilter={setMappingFilter} />}\n\n      <Container type=\"content\" className=\"home-start\">\n        <h2>\n          Refugees Camps - Χωρητικότητα και εξέλιξη των Covid19 κρουσμάτων\n        </h2>\n        <pre></pre>\n        <p>κειμενο</p>\n        <p className=\"note\">Πηγές DATA: </p>\n      </Container>\n    </Layout>\n  );\n};\n\nexport default SecondPage;\n"],"sourceRoot":""}