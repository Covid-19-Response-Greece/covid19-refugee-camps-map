{"version":3,"sources":["webpack:///./src/pages/covid19camps.js"],"names":["CENTER","FifthPage","a","map","leafletElement","axios","get","response","console","log","message","data","Array","isArray","length","geoJson","type","features","region","lat","latitude","lng","longtitude","properties","geometry","coordinates","L","GeoJSON","pointToLayer","feature","latlng","casesString","capacity","lastupdate","description","name_gr","region_gr","total_confirmed_cases","total_samples","slice","html","marker","icon","divIcon","className","riseOnHover","addTo","mapSettings","center","defaultBaseMap","zoom","mapEffect","zoomSnap","zoomDelta","pageName"],"mappings":"ylBAQE,IAIMA,EAAS,CAHR,UACA,UAgIMC,UA3HK,WAAM,kCAQtB,qCAAAC,EAAA,6DAA2CC,QAA3C,MAAmD,GAAnD,GAA2BC,eAA3B,kBAIqBC,IAAMC,IAAI,uDAJ/B,OAIIC,EAJJ,8DAMIC,QAAQC,IAAR,oBAAgC,KAAEC,QAAlC,MANJ,gCAUwBH,EAAdI,YAVV,MAUiB,GAVjB,EAWkBC,MAAMC,QAAQF,IAASA,EAAKG,QAAU,EAXxD,mDAeQC,EAAU,CACdC,KAAM,oBACNC,SAAUN,EAAKR,KACb,SAACe,QACD,IADCA,MAAS,IACV,MAC2CA,EAAzBC,EADlB,EACQC,SAA2BC,EADnC,EACuBC,WACvB,MAAO,CACLN,KAAM,UACNO,WAAW,OAAD,UACLL,GAELM,SAAU,CACRR,KAAM,QACNS,YAAa,CAAEJ,EAAKF,SAMN,IAAIO,IAAEC,QAAQZ,EAAS,CAC3Ca,aAAc,SAACC,EAAcC,QAAW,IAAzBD,MAAU,IAAe,IAElCE,EAFkC,EACVF,EAApBN,kBAD8B,MACjB,GADiB,EAKpCS,EAOET,EAPFS,SACeC,EAMbV,EANF,eACAW,EAKEX,EALFW,YACAC,EAIEZ,EAJFY,QACAC,EAGEb,EAHFa,UACAC,EAEEd,EAFFc,sBACAC,EACEf,EADFe,cAGFP,EAAW,GAAMM,EAEZA,EAAwB,MAC3BN,EAAiBA,EAAYQ,MAAM,GAAI,GAA5B,MAIb,IAAMC,EAAI,yHAGQL,EAHR,8BAIEC,EAJF,sEAMoBJ,EANpB,oEAOkCM,EAPlC,kEAQsCD,EARtC,uDAS2BH,EAT3B,0EAUyCD,EAVzC,sEAaHF,EAbG,oCAiBV,OAAOL,IAAEe,OAAQX,EAAQ,CACvBY,KAAMhB,IAAEiB,QAAQ,CACdC,UAAW,OACXJ,SAEFK,aAAa,OAKLC,MAAM3C,GAnFtB,0DARsB,sBA8FtB,IAAM4C,EAAc,CAClBC,OAAQhD,EACRiD,eAAgB,gBAChBC,KAnGiB,IAoGjBC,UAlGoB,4CAmGpBC,SAAS,IACTC,UAAW,IAGb,OACE,kBAAC,IAAD,CAAQC,SAAS,QACf,kBAAC,IAAD,KACE,sDAGF,kBAAC,IAAQP,GAET,kBAAC,IAAD,CAAW/B,KAAK,UAAU4B,UAAU,cACpC,+EACA,8BAGA,sCACE,uBAAGA,UAAU,QAAb","file":"component---src-pages-covid-19-camps-js-4ee458d9aa442fd4d66c.js","sourcesContent":["  import React from 'react';\n  import Helmet from 'react-helmet';\n  import L from 'leaflet';\n  import axios from 'axios';\n  import Layout from 'components/Layout';\n  import Container from 'components/Container';\n  import Map from 'components/Map';\n  \n  const LOCATION = {\n    lat: 38.814566,\n    lng: 23.067380\n  };\n  const CENTER = [LOCATION.lat, LOCATION.lng];\n  const DEFAULT_ZOOM = 6.5;\n  \n  const FifthPage = () => {\n  \n    /**\n     * mapEffect\n     * @description Fires a callback once the page renders\n     * @example Here this is and example of being used to zoom in and set a popup on load\n     */\n  \n    async function mapEffect({ leafletElement: map } = {}) {\n      let response;\n  \n      try {\n        response = await axios.get('https://api.jsonbin.io/b/5ee9d1a3ccc9877ac37d5cf0/7');\n      } catch(e) {\n        console.log(`Failed to fetch: ${e.message}`, e);\n        return;\n      }\n      /**const { \"refugee-camps\" : refugeeCamps } = refugeeCamps; */\n      const { data = {} } = response;\n      const hasData = Array.isArray(data) && data.length >= 0;\n  \n      if ( !hasData ) return;\n  \n      const geoJson = {\n        type: 'FeatureCollection',\n        features: data.map(\n          (region = {}) => \n          {\n          const { latitude: lat, longtitude: lng } = region;\n          return {\n            type: 'Feature',\n            properties: {\n              ...region,\n            },\n            geometry: {\n              type: 'Point',\n              coordinates: [ lng, lat ]\n            }\n          }\n        })\n      }\n  \n      const geoJsonLayers = new L.GeoJSON(geoJson, {\n        pointToLayer: (feature = {}, latlng) => {\n          const { properties = {} } = feature;\n          let casesString;\n  \n          const {\n            capacity,\n            \"last update\" :lastupdate,\n            description,\n            name_gr,\n            region_gr,\n            total_confirmed_cases,\n            total_samples,\n          } = properties\n  \n          casesString = `${total_confirmed_cases}`;\n  \n          if ( total_confirmed_cases > 1000 ) {\n            casesString = `${casesString.slice(0, -3)}k+`\n          }\n          \n  \n          const html = `\n            <span class=\"icon-marker\">\n              <span class=\"icon-marker-tooltip\">\n                <h3> Camp ${name_gr}</h3>\n                <h3>${region_gr}</h3>\n                <ul>\n                <h2><li>Χωρητικότητα: ${capacity}</li></h2> \n                <li><strong>Αριθμός Tests:</strong> ${total_samples}</li>\n                <li><strong>Κρούσματα COVID19:</strong> ${total_confirmed_cases}</li>\n                  <li><i><h3>Camp info:</h3> ${description} </i></li>\n                  <li><strong>Τελευταία ανανέωση:</strong> ${lastupdate}</li>\n                </ul>\n              </span>\n              ${ casesString }\n            </span>\n          `;\n  \n          return L.marker( latlng, {\n            icon: L.divIcon({\n              className: 'icon',\n              html\n            }),\n            riseOnHover: true\n          });\n        }\n      });\n  \n      geoJsonLayers.addTo(map)\n    }\n  \n    const mapSettings = {\n      center: CENTER,\n      defaultBaseMap: 'OpenStreetMap',\n      zoom: DEFAULT_ZOOM,\n      mapEffect,\n      zoomSnap:0.25,\n      zoomDelta: 0.50,\n    };\n  \n    return (\n      <Layout pageName=\"home\">\n        <Helmet>\n          <title>COVID-19 στα Camps</title>\n        </Helmet>\n  \n        <Map {...mapSettings} />\n  \n        <Container type=\"content\" className=\"home-start\">\n        <h2>Refugees Camps - Eξέλιξη των Covid19 κρουσμάτων</h2>\n        <pre>\n          \n          </pre>\n        <p>κειμενο</p>\n          <p className=\"note\">Πηγές DATA: </p>\n        </Container>\n      </Layout>\n    );\n  };\n\nexport default FifthPage;"],"sourceRoot":""}