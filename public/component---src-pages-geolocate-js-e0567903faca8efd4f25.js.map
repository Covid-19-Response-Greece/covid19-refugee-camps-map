{"version":3,"sources":["webpack:///./src/pages/geolocate.js"],"names":["CENTER","SecondPage","a","map","leafletElement","locate","setView","maxZoom","axios","get","response","console","log","message","data","Array","isArray","length","geoJson","type","features","region","lat","latitude","lng","longtitude","properties","geometry","coordinates","L","GeoJSON","pointToLayer","feature","latlng","casesString","capacity","lastupdate","description","name_gr","region_gr","total_confirmed_cases","total_samples","slice","html","marker","icon","divIcon","className","riseOnHover","addTo","mapSettings","center","defaultBaseMap","zoom","mapEffect","zoomSnap","zoomDelta","pageName"],"mappings":"ylBAQA,IAIMA,EAAS,CAHR,UACA,UAkIQC,UA7HI,WAAM,kCAQvB,qCAAAC,EAAA,6DAA2CC,QAA3C,MAAmD,GAAnD,GAA2BC,gBAGrBC,OAAO,CAACC,SAAS,EAAMC,QAAS,KAHtC,kBAMqBC,IAAMC,IAAI,uDAN/B,OAMIC,EANJ,8DAQIC,QAAQC,IAAR,oBAAgC,KAAEC,QAAlC,MARJ,gCAYwBH,EAAdI,YAZV,MAYiB,GAZjB,EAakBC,MAAMC,QAAQF,IAASA,EAAKG,QAAU,EAbxD,mDAiBQC,EAAU,CACdC,KAAM,oBACNC,SAAUN,EAAKX,KACb,SAACkB,QACD,IADCA,MAAS,IACV,MAC2CA,EAAzBC,EADlB,EACQC,SAA2BC,EADnC,EACuBC,WACvB,MAAO,CACLN,KAAM,UACNO,WAAW,OAAD,UACLL,GAELM,SAAU,CACRR,KAAM,QACNS,YAAa,CAAEJ,EAAKF,SAMN,IAAIO,IAAEC,QAAQZ,EAAS,CAC3Ca,aAAc,SAACC,EAAcC,QAAW,IAAzBD,MAAU,IAAe,IAElCE,EAFkC,EACVF,EAApBN,kBAD8B,MACjB,GADiB,EAKpCS,EAOET,EAPFS,SACeC,EAMbV,EANF,eACAW,EAKEX,EALFW,YACAC,EAIEZ,EAJFY,QACAC,EAGEb,EAHFa,UACAC,EAEEd,EAFFc,sBACAC,EACEf,EADFe,cAGFP,EAAW,GAAMC,EAEZA,EAAW,MACdD,EAAiBA,EAAYQ,MAAM,GAAI,GAA5B,MAIb,IAAMC,EAAI,mHAGQL,EAHR,4BAIEC,EAJF,+EAMiCJ,EANjC,4DAOkCM,EAPlC,gEAQsCD,EARtC,qDAS2BH,EAT3B,wEAUyCD,EAVzC,gEAaHF,EAbG,gCAiBV,OAAOL,IAAEe,OAAQX,EAAQ,CACvBY,KAAMhB,IAAEiB,QAAQ,CACdC,UAAW,OACXJ,SAEFK,aAAa,OAKLC,MAAM9C,GArFtB,0DARuB,sBAgGvB,IAAM+C,EAAc,CAClBC,OAAQnD,EACRoD,eAAgB,gBAChBC,KArGiB,IAsGjBC,UApGqB,4CAqGrBC,SAAS,IACTC,UAAW,IAGb,OACE,kBAAC,IAAD,CAAQC,SAAS,QACf,kBAAC,IAAD,KACE,sDAGF,kBAAC,IAAQP,GAET,kBAAC,IAAD,CAAW/B,KAAK,UAAU4B,UAAU,cACpC,gGACA,8BAGA,sCACE,uBAAGA,UAAU,QAAb","file":"component---src-pages-geolocate-js-e0567903faca8efd4f25.js","sourcesContent":["import React from 'react';\nimport Helmet from 'react-helmet';\nimport L from 'leaflet';\nimport axios from 'axios';\nimport Layout from 'components/Layout';\nimport Container from 'components/Container';\nimport Map from 'components/Map';\n\nconst LOCATION = {\n  lat: 38.814566,\n  lng: 23.067380\n};\nconst CENTER = [LOCATION.lat, LOCATION.lng];\nconst DEFAULT_ZOOM = 6.5;\n\nconst SecondPage = () => {\n\n  /**\n   * mapEffect\n   * @description Fires a callback once the page renders\n   * @example Here this is and example of being used to zoom in and set a popup on load\n   */\n\n  async function mapEffect({ leafletElement: map } = {}) {\n    let response;\n\n    map.locate({setView: true, maxZoom: 10});\n\n    try {\n      response = await axios.get('https://api.jsonbin.io/b/5ee9d1a3ccc9877ac37d5cf0/7');\n    } catch(e) {\n      console.log(`Failed to fetch: ${e.message}`, e);\n      return;\n    }\n    /**const { \"refugee-camps\" : refugeeCamps } = refugeeCamps; */\n    const { data = {} } = response;\n    const hasData = Array.isArray(data) && data.length >= 0;\n\n    if ( !hasData ) return;\n\n    const geoJson = {\n      type: 'FeatureCollection',\n      features: data.map(\n        (region = {}) => \n        {\n        const { latitude: lat, longtitude: lng } = region;\n        return {\n          type: 'Feature',\n          properties: {\n            ...region,\n          },\n          geometry: {\n            type: 'Point',\n            coordinates: [ lng, lat ]\n          }\n        }\n      })\n    }\n\n    const geoJsonLayers = new L.GeoJSON(geoJson, {\n      pointToLayer: (feature = {}, latlng) => {\n        const { properties = {} } = feature;\n        let casesString;\n\n        const {\n          capacity,\n          \"last update\" :lastupdate,\n          description,\n          name_gr,\n          region_gr,\n          total_confirmed_cases,\n          total_samples,\n        } = properties\n\n        casesString = `${capacity}`;\n\n        if ( capacity > 1000 ) {\n          casesString = `${casesString.slice(0, -3)}k+`\n        }\n\n\n        const html = `\n          <span class=\"icon-marker\">\n            <span class=\"icon-marker-tooltip\">\n              <h3> Camp ${name_gr}</h3>\n              <h3>${region_gr}</h3>\n              <ul>\n              <li><strong>Χωρητικότητα:</strong> ${capacity}</li>\n              <li><strong>Αριθμός Tests:</strong> ${total_samples}</li>\n              <li><strong>Κρούσματα COVID19:</strong> ${total_confirmed_cases}</li>\n                <li><i><h3>Camp info:</h3> ${description} </i></li>\n                <li><strong>Τελευταία ανανέωση:</strong> ${lastupdate}</li>\n              </ul>\n            </span>\n            ${ casesString }\n          </span>\n        `;\n\n        return L.marker( latlng, {\n          icon: L.divIcon({\n            className: 'icon',\n            html\n          }),\n          riseOnHover: true\n        });\n      }\n    });\n\n    geoJsonLayers.addTo(map)\n  }\n\n  const mapSettings = {\n    center: CENTER,\n    defaultBaseMap: 'OpenStreetMap',\n    zoom: DEFAULT_ZOOM,\n    mapEffect,\n    zoomSnap:0.25,\n    zoomDelta: 0.50,\n  };\n\n  return (\n    <Layout pageName=\"home\">\n      <Helmet>\n        <title>COVID-19 στα Camps</title>\n      </Helmet>\n\n      <Map {...mapSettings} />\n\n      <Container type=\"content\" className=\"home-start\">\n      <h2>Refugees Camps - Χωρητικότητα και εξέλιξη των Covid19 κρουσμάτων</h2>\n      <pre>\n        \n        </pre>\n      <p>κειμενο</p>\n        <p className=\"note\">Πηγές DATA: </p>\n      </Container>\n    </Layout>\n  );\n};\n\nexport default SecondPage;\n\n\n\n\n"],"sourceRoot":""}